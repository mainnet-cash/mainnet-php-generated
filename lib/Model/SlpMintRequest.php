<?php
/**
 * SlpMintRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mainnet Cash
 *
 * A developer friendly bitcoin cash wallet api  This API is currently in *active* development, breaking changes may be made prior to official release of version 1.0.0.
 *
 * The version of the OpenAPI document: 0.3.33
 * Contact: hello@mainnet.cash
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mainnet\Model;

use \ArrayAccess;
use \Mainnet\ObjectSerializer;

/**
 * SlpMintRequest Class Doc Comment
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SlpMintRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SlpMintRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'wallet_id' => 'string',
        'value' => 'string',
        'token_id' => 'string',
        'end_baton' => 'bool',
        'token_receiver_slp_addr' => 'string',
        'baton_receiver_slp_addr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'wallet_id' => null,
        'value' => null,
        'token_id' => null,
        'end_baton' => null,
        'token_receiver_slp_addr' => null,
        'baton_receiver_slp_addr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wallet_id' => 'walletId',
        'value' => 'value',
        'token_id' => 'tokenId',
        'end_baton' => 'endBaton',
        'token_receiver_slp_addr' => 'tokenReceiverSlpAddr',
        'baton_receiver_slp_addr' => 'batonReceiverSlpAddr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wallet_id' => 'setWalletId',
        'value' => 'setValue',
        'token_id' => 'setTokenId',
        'end_baton' => 'setEndBaton',
        'token_receiver_slp_addr' => 'setTokenReceiverSlpAddr',
        'baton_receiver_slp_addr' => 'setBatonReceiverSlpAddr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wallet_id' => 'getWalletId',
        'value' => 'getValue',
        'token_id' => 'getTokenId',
        'end_baton' => 'getEndBaton',
        'token_receiver_slp_addr' => 'getTokenReceiverSlpAddr',
        'baton_receiver_slp_addr' => 'getBatonReceiverSlpAddr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wallet_id'] = isset($data['wallet_id']) ? $data['wallet_id'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['token_id'] = isset($data['token_id']) ? $data['token_id'] : null;
        $this->container['end_baton'] = isset($data['end_baton']) ? $data['end_baton'] : null;
        $this->container['token_receiver_slp_addr'] = isset($data['token_receiver_slp_addr']) ? $data['token_receiver_slp_addr'] : null;
        $this->container['baton_receiver_slp_addr'] = isset($data['baton_receiver_slp_addr']) ? $data['baton_receiver_slp_addr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['wallet_id'] === null) {
            $invalidProperties[] = "'wallet_id' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['token_id'] === null) {
            $invalidProperties[] = "'token_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wallet_id
     *
     * @return string
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string $wallet_id ID that is returned in `wallet` field of /wallet call
     *
     * @return $this
     */
    public function setWalletId($wallet_id)
    {
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value Value is represented as a string to avoid precision loss
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string $token_id token_id
     *
     * @return $this
     */
    public function setTokenId($token_id)
    {
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets end_baton
     *
     * @return bool|null
     */
    public function getEndBaton()
    {
        return $this->container['end_baton'];
    }

    /**
     * Sets end_baton
     *
     * @param bool|null $end_baton Indicates if token should not be 'mintable' anymore, e.g. total circulation amount increased
     *
     * @return $this
     */
    public function setEndBaton($end_baton)
    {
        $this->container['end_baton'] = $end_baton;

        return $this;
    }

    /**
     * Gets token_receiver_slp_addr
     *
     * @return string|null
     */
    public function getTokenReceiverSlpAddr()
    {
        return $this->container['token_receiver_slp_addr'];
    }

    /**
     * Sets token_receiver_slp_addr
     *
     * @param string|null $token_receiver_slp_addr token_receiver_slp_addr
     *
     * @return $this
     */
    public function setTokenReceiverSlpAddr($token_receiver_slp_addr)
    {
        $this->container['token_receiver_slp_addr'] = $token_receiver_slp_addr;

        return $this;
    }

    /**
     * Gets baton_receiver_slp_addr
     *
     * @return string|null
     */
    public function getBatonReceiverSlpAddr()
    {
        return $this->container['baton_receiver_slp_addr'];
    }

    /**
     * Sets baton_receiver_slp_addr
     *
     * @param string|null $baton_receiver_slp_addr baton_receiver_slp_addr
     *
     * @return $this
     */
    public function setBatonReceiverSlpAddr($baton_receiver_slp_addr)
    {
        $this->container['baton_receiver_slp_addr'] = $baton_receiver_slp_addr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


