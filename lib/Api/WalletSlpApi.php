<?php
/**
 * WalletSlpApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mainnet Cash
 *
 * A developer friendly bitcoin cash wallet api  This API is currently in *active* development, breaking changes may be made prior to official release of version 1.0.0.
 *
 * The version of the OpenAPI document: 0.3.32
 * Contact: hello@mainnet.cash
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mainnet\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Mainnet\ApiException;
use Mainnet\Configuration;
use Mainnet\HeaderSelector;
use Mainnet\ObjectSerializer;

/**
 * WalletSlpApi Class Doc Comment
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WalletSlpApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation nftChildGenesis
     *
     * Get created tokenId back and new NFT child token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT child token (genesis) by consuming a parent token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpGenesisResponse
     */
    public function nftChildGenesis($slp_genesis_request)
    {
        list($response) = $this->nftChildGenesisWithHttpInfo($slp_genesis_request);
        return $response;
    }

    /**
     * Operation nftChildGenesisWithHttpInfo
     *
     * Get created tokenId back and new NFT child token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT child token (genesis) by consuming a parent token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpGenesisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function nftChildGenesisWithHttpInfo($slp_genesis_request)
    {
        $request = $this->nftChildGenesisRequest($slp_genesis_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpGenesisResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpGenesisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpGenesisResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpGenesisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation nftChildGenesisAsync
     *
     * Get created tokenId back and new NFT child token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT child token (genesis) by consuming a parent token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nftChildGenesisAsync($slp_genesis_request)
    {
        return $this->nftChildGenesisAsyncWithHttpInfo($slp_genesis_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation nftChildGenesisAsyncWithHttpInfo
     *
     * Get created tokenId back and new NFT child token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT child token (genesis) by consuming a parent token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nftChildGenesisAsyncWithHttpInfo($slp_genesis_request)
    {
        $returnType = '\Mainnet\Model\SlpGenesisResponse';
        $request = $this->nftChildGenesisRequest($slp_genesis_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'nftChildGenesis'
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT child token (genesis) by consuming a parent token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function nftChildGenesisRequest($slp_genesis_request)
    {
        // verify the required parameter 'slp_genesis_request' is set
        if ($slp_genesis_request === null || (is_array($slp_genesis_request) && count($slp_genesis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_genesis_request when calling nftChildGenesis'
            );
        }

        $resourcePath = '/wallet/slp/nft_child_genesis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_genesis_request)) {
            $_tempBody = $slp_genesis_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation nftParentGenesis
     *
     * Get created tokenId back and new NFT token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT parent token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpGenesisResponse
     */
    public function nftParentGenesis($slp_genesis_request)
    {
        list($response) = $this->nftParentGenesisWithHttpInfo($slp_genesis_request);
        return $response;
    }

    /**
     * Operation nftParentGenesisWithHttpInfo
     *
     * Get created tokenId back and new NFT token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT parent token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpGenesisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function nftParentGenesisWithHttpInfo($slp_genesis_request)
    {
        $request = $this->nftParentGenesisRequest($slp_genesis_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpGenesisResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpGenesisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpGenesisResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpGenesisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation nftParentGenesisAsync
     *
     * Get created tokenId back and new NFT token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT parent token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nftParentGenesisAsync($slp_genesis_request)
    {
        return $this->nftParentGenesisAsyncWithHttpInfo($slp_genesis_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation nftParentGenesisAsyncWithHttpInfo
     *
     * Get created tokenId back and new NFT token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT parent token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function nftParentGenesisAsyncWithHttpInfo($slp_genesis_request)
    {
        $returnType = '\Mainnet\Model\SlpGenesisResponse';
        $request = $this->nftParentGenesisRequest($slp_genesis_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'nftParentGenesis'
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new NFT parent token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function nftParentGenesisRequest($slp_genesis_request)
    {
        // verify the required parameter 'slp_genesis_request' is set
        if ($slp_genesis_request === null || (is_array($slp_genesis_request) && count($slp_genesis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_genesis_request when calling nftParentGenesis'
            );
        }

        $resourcePath = '/wallet/slp/nft_parent_genesis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_genesis_request)) {
            $_tempBody = $slp_genesis_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpAllBalances
     *
     * Get all slp balances of the wallet
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a wallet slp balances (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpBalanceResponse[]
     */
    public function slpAllBalances($serialized_wallet)
    {
        list($response) = $this->slpAllBalancesWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation slpAllBalancesWithHttpInfo
     *
     * Get all slp balances of the wallet
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a wallet slp balances (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpBalanceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function slpAllBalancesWithHttpInfo($serialized_wallet)
    {
        $request = $this->slpAllBalancesRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpBalanceResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpBalanceResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpBalanceResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpBalanceResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpAllBalancesAsync
     *
     * Get all slp balances of the wallet
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a wallet slp balances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpAllBalancesAsync($serialized_wallet)
    {
        return $this->slpAllBalancesAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpAllBalancesAsyncWithHttpInfo
     *
     * Get all slp balances of the wallet
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a wallet slp balances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpAllBalancesAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\SlpBalanceResponse[]';
        $request = $this->slpAllBalancesRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpAllBalances'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a wallet slp balances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpAllBalancesRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling slpAllBalances'
            );
        }

        $resourcePath = '/wallet/slp/all_balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpBalance
     *
     * Get total slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpBalanceRequest $slp_balance_request Request for a wallet slp token balance (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpBalanceResponse
     */
    public function slpBalance($slp_balance_request)
    {
        list($response) = $this->slpBalanceWithHttpInfo($slp_balance_request);
        return $response;
    }

    /**
     * Operation slpBalanceWithHttpInfo
     *
     * Get total slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpBalanceRequest $slp_balance_request Request for a wallet slp token balance (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpBalanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpBalanceWithHttpInfo($slp_balance_request)
    {
        $request = $this->slpBalanceRequest($slp_balance_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpBalanceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpBalanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpBalanceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpBalanceAsync
     *
     * Get total slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpBalanceRequest $slp_balance_request Request for a wallet slp token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpBalanceAsync($slp_balance_request)
    {
        return $this->slpBalanceAsyncWithHttpInfo($slp_balance_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpBalanceAsyncWithHttpInfo
     *
     * Get total slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpBalanceRequest $slp_balance_request Request for a wallet slp token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpBalanceAsyncWithHttpInfo($slp_balance_request)
    {
        $returnType = '\Mainnet\Model\SlpBalanceResponse';
        $request = $this->slpBalanceRequest($slp_balance_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpBalance'
     *
     * @param  \Mainnet\Model\SlpBalanceRequest $slp_balance_request Request for a wallet slp token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpBalanceRequest($slp_balance_request)
    {
        // verify the required parameter 'slp_balance_request' is set
        if ($slp_balance_request === null || (is_array($slp_balance_request) && count($slp_balance_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_balance_request when calling slpBalance'
            );
        }

        $resourcePath = '/wallet/slp/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_balance_request)) {
            $_tempBody = $slp_balance_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpCreateWallet
     *
     * create a new SLP wallet
     *
     * @param  \Mainnet\Model\WalletRequest $wallet_request Request a new SLP wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\WalletResponse
     */
    public function slpCreateWallet($wallet_request)
    {
        list($response) = $this->slpCreateWalletWithHttpInfo($wallet_request);
        return $response;
    }

    /**
     * Operation slpCreateWalletWithHttpInfo
     *
     * create a new SLP wallet
     *
     * @param  \Mainnet\Model\WalletRequest $wallet_request Request a new SLP wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\WalletResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpCreateWalletWithHttpInfo($wallet_request)
    {
        $request = $this->slpCreateWalletRequest($wallet_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\WalletResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\WalletResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\WalletResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\WalletResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpCreateWalletAsync
     *
     * create a new SLP wallet
     *
     * @param  \Mainnet\Model\WalletRequest $wallet_request Request a new SLP wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpCreateWalletAsync($wallet_request)
    {
        return $this->slpCreateWalletAsyncWithHttpInfo($wallet_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpCreateWalletAsyncWithHttpInfo
     *
     * create a new SLP wallet
     *
     * @param  \Mainnet\Model\WalletRequest $wallet_request Request a new SLP wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpCreateWalletAsyncWithHttpInfo($wallet_request)
    {
        $returnType = '\Mainnet\Model\WalletResponse';
        $request = $this->slpCreateWalletRequest($wallet_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpCreateWallet'
     *
     * @param  \Mainnet\Model\WalletRequest $wallet_request Request a new SLP wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpCreateWalletRequest($wallet_request)
    {
        // verify the required parameter 'wallet_request' is set
        if ($wallet_request === null || (is_array($wallet_request) && count($wallet_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wallet_request when calling slpCreateWallet'
            );
        }

        $resourcePath = '/wallet/slp/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($wallet_request)) {
            $_tempBody = $wallet_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpDepositAddress
     *
     * Get an SLP deposit address in cash address format
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit address given a wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpDepositAddressResponse
     */
    public function slpDepositAddress($serialized_wallet)
    {
        list($response) = $this->slpDepositAddressWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation slpDepositAddressWithHttpInfo
     *
     * Get an SLP deposit address in cash address format
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit address given a wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpDepositAddressResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpDepositAddressWithHttpInfo($serialized_wallet)
    {
        $request = $this->slpDepositAddressRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpDepositAddressResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpDepositAddressResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpDepositAddressResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpDepositAddressResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpDepositAddressAsync
     *
     * Get an SLP deposit address in cash address format
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpDepositAddressAsync($serialized_wallet)
    {
        return $this->slpDepositAddressAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpDepositAddressAsyncWithHttpInfo
     *
     * Get an SLP deposit address in cash address format
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpDepositAddressAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\SlpDepositAddressResponse';
        $request = $this->slpDepositAddressRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpDepositAddress'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpDepositAddressRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling slpDepositAddress'
            );
        }

        $resourcePath = '/wallet/slp/deposit_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpDepositQr
     *
     * Get an SLP receiving cash address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit cash address as a Quick Response code (qrcode) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\ScalableVectorGraphic
     */
    public function slpDepositQr($serialized_wallet)
    {
        list($response) = $this->slpDepositQrWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation slpDepositQrWithHttpInfo
     *
     * Get an SLP receiving cash address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit cash address as a Quick Response code (qrcode) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\ScalableVectorGraphic, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpDepositQrWithHttpInfo($serialized_wallet)
    {
        $request = $this->slpDepositQrRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\ScalableVectorGraphic' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\ScalableVectorGraphic', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\ScalableVectorGraphic';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\ScalableVectorGraphic',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpDepositQrAsync
     *
     * Get an SLP receiving cash address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit cash address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpDepositQrAsync($serialized_wallet)
    {
        return $this->slpDepositQrAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpDepositQrAsyncWithHttpInfo
     *
     * Get an SLP receiving cash address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit cash address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpDepositQrAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\ScalableVectorGraphic';
        $request = $this->slpDepositQrRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpDepositQr'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SLP deposit cash address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpDepositQrRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling slpDepositQr'
            );
        }

        $resourcePath = '/wallet/slp/deposit_qr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpGenesis
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new SLP token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpGenesisResponse
     */
    public function slpGenesis($slp_genesis_request)
    {
        list($response) = $this->slpGenesisWithHttpInfo($slp_genesis_request);
        return $response;
    }

    /**
     * Operation slpGenesisWithHttpInfo
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new SLP token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpGenesisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpGenesisWithHttpInfo($slp_genesis_request)
    {
        $request = $this->slpGenesisRequest($slp_genesis_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpGenesisResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpGenesisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpGenesisResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpGenesisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpGenesisAsync
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new SLP token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpGenesisAsync($slp_genesis_request)
    {
        return $this->slpGenesisAsyncWithHttpInfo($slp_genesis_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpGenesisAsyncWithHttpInfo
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new SLP token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpGenesisAsyncWithHttpInfo($slp_genesis_request)
    {
        $returnType = '\Mainnet\Model\SlpGenesisResponse';
        $request = $this->slpGenesisRequest($slp_genesis_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpGenesis'
     *
     * @param  \Mainnet\Model\SlpGenesisRequest $slp_genesis_request Request to create a new SLP token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpGenesisRequest($slp_genesis_request)
    {
        // verify the required parameter 'slp_genesis_request' is set
        if ($slp_genesis_request === null || (is_array($slp_genesis_request) && count($slp_genesis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_genesis_request when calling slpGenesis'
            );
        }

        $resourcePath = '/wallet/slp/genesis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_genesis_request)) {
            $_tempBody = $slp_genesis_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpMint
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpMintRequest $slp_mint_request Request to mint more of SLP tokens (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpMintResponse
     */
    public function slpMint($slp_mint_request)
    {
        list($response) = $this->slpMintWithHttpInfo($slp_mint_request);
        return $response;
    }

    /**
     * Operation slpMintWithHttpInfo
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpMintRequest $slp_mint_request Request to mint more of SLP tokens (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpMintResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpMintWithHttpInfo($slp_mint_request)
    {
        $request = $this->slpMintRequest($slp_mint_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpMintResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpMintResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpMintResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpMintResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpMintAsync
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpMintRequest $slp_mint_request Request to mint more of SLP tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpMintAsync($slp_mint_request)
    {
        return $this->slpMintAsyncWithHttpInfo($slp_mint_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpMintAsyncWithHttpInfo
     *
     * Get created tokenId back and new slp token balance of the wallet
     *
     * @param  \Mainnet\Model\SlpMintRequest $slp_mint_request Request to mint more of SLP tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpMintAsyncWithHttpInfo($slp_mint_request)
    {
        $returnType = '\Mainnet\Model\SlpMintResponse';
        $request = $this->slpMintRequest($slp_mint_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpMint'
     *
     * @param  \Mainnet\Model\SlpMintRequest $slp_mint_request Request to mint more of SLP tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpMintRequest($slp_mint_request)
    {
        // verify the required parameter 'slp_mint_request' is set
        if ($slp_mint_request === null || (is_array($slp_mint_request) && count($slp_mint_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_mint_request when calling slpMint'
            );
        }

        $resourcePath = '/wallet/slp/mint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_mint_request)) {
            $_tempBody = $slp_mint_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpOutpoints
     *
     * Get list of unspent SLP outpoints.
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request of unspent SLP outpoints (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpOutpointsResponse
     */
    public function slpOutpoints($serialized_wallet)
    {
        list($response) = $this->slpOutpointsWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation slpOutpointsWithHttpInfo
     *
     * Get list of unspent SLP outpoints.
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request of unspent SLP outpoints (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpOutpointsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpOutpointsWithHttpInfo($serialized_wallet)
    {
        $request = $this->slpOutpointsRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpOutpointsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpOutpointsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpOutpointsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpOutpointsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpOutpointsAsync
     *
     * Get list of unspent SLP outpoints.
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request of unspent SLP outpoints (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpOutpointsAsync($serialized_wallet)
    {
        return $this->slpOutpointsAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpOutpointsAsyncWithHttpInfo
     *
     * Get list of unspent SLP outpoints.
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request of unspent SLP outpoints (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpOutpointsAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\SlpOutpointsResponse';
        $request = $this->slpOutpointsRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpOutpoints'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request of unspent SLP outpoints (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpOutpointsRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling slpOutpoints'
            );
        }

        $resourcePath = '/wallet/slp/outpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpSend
     *
     * Send some SLP token amount to a given cash address
     *
     * @param  \Mainnet\Model\SlpSendRequest $slp_send_request place an SLP send request (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpSendResponse
     */
    public function slpSend($slp_send_request)
    {
        list($response) = $this->slpSendWithHttpInfo($slp_send_request);
        return $response;
    }

    /**
     * Operation slpSendWithHttpInfo
     *
     * Send some SLP token amount to a given cash address
     *
     * @param  \Mainnet\Model\SlpSendRequest $slp_send_request place an SLP send request (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpSendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpSendWithHttpInfo($slp_send_request)
    {
        $request = $this->slpSendRequest($slp_send_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\Mainnet\Model\SlpSendResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpSendResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpSendResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpSendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpSendAsync
     *
     * Send some SLP token amount to a given cash address
     *
     * @param  \Mainnet\Model\SlpSendRequest $slp_send_request place an SLP send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpSendAsync($slp_send_request)
    {
        return $this->slpSendAsyncWithHttpInfo($slp_send_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpSendAsyncWithHttpInfo
     *
     * Send some SLP token amount to a given cash address
     *
     * @param  \Mainnet\Model\SlpSendRequest $slp_send_request place an SLP send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpSendAsyncWithHttpInfo($slp_send_request)
    {
        $returnType = '\Mainnet\Model\SlpSendResponse';
        $request = $this->slpSendRequest($slp_send_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpSend'
     *
     * @param  \Mainnet\Model\SlpSendRequest $slp_send_request place an SLP send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpSendRequest($slp_send_request)
    {
        // verify the required parameter 'slp_send_request' is set
        if ($slp_send_request === null || (is_array($slp_send_request) && count($slp_send_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_send_request when calling slpSend'
            );
        }

        $resourcePath = '/wallet/slp/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_send_request)) {
            $_tempBody = $slp_send_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpSendMax
     *
     * Send all available SLP funds to a given address
     *
     * @param  \Mainnet\Model\SlpSendMaxRequest $slp_send_max_request Request to send all available SLP funds to a given address (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpSendResponse
     */
    public function slpSendMax($slp_send_max_request)
    {
        list($response) = $this->slpSendMaxWithHttpInfo($slp_send_max_request);
        return $response;
    }

    /**
     * Operation slpSendMaxWithHttpInfo
     *
     * Send all available SLP funds to a given address
     *
     * @param  \Mainnet\Model\SlpSendMaxRequest $slp_send_max_request Request to send all available SLP funds to a given address (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpSendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpSendMaxWithHttpInfo($slp_send_max_request)
    {
        $request = $this->slpSendMaxRequest($slp_send_max_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\Mainnet\Model\SlpSendResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpSendResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpSendResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpSendResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpSendMaxAsync
     *
     * Send all available SLP funds to a given address
     *
     * @param  \Mainnet\Model\SlpSendMaxRequest $slp_send_max_request Request to send all available SLP funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpSendMaxAsync($slp_send_max_request)
    {
        return $this->slpSendMaxAsyncWithHttpInfo($slp_send_max_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpSendMaxAsyncWithHttpInfo
     *
     * Send all available SLP funds to a given address
     *
     * @param  \Mainnet\Model\SlpSendMaxRequest $slp_send_max_request Request to send all available SLP funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpSendMaxAsyncWithHttpInfo($slp_send_max_request)
    {
        $returnType = '\Mainnet\Model\SlpSendResponse';
        $request = $this->slpSendMaxRequest($slp_send_max_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpSendMax'
     *
     * @param  \Mainnet\Model\SlpSendMaxRequest $slp_send_max_request Request to send all available SLP funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpSendMaxRequest($slp_send_max_request)
    {
        // verify the required parameter 'slp_send_max_request' is set
        if ($slp_send_max_request === null || (is_array($slp_send_max_request) && count($slp_send_max_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_send_max_request when calling slpSendMax'
            );
        }

        $resourcePath = '/wallet/slp/send_max';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_send_max_request)) {
            $_tempBody = $slp_send_max_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpTokenInfo
     *
     * Get information about the token
     *
     * @param  \Mainnet\Model\SlpTokenInfoRequest $slp_token_info_request Request to get information about the token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpTokenInfoResponse
     */
    public function slpTokenInfo($slp_token_info_request)
    {
        list($response) = $this->slpTokenInfoWithHttpInfo($slp_token_info_request);
        return $response;
    }

    /**
     * Operation slpTokenInfoWithHttpInfo
     *
     * Get information about the token
     *
     * @param  \Mainnet\Model\SlpTokenInfoRequest $slp_token_info_request Request to get information about the token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpTokenInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpTokenInfoWithHttpInfo($slp_token_info_request)
    {
        $request = $this->slpTokenInfoRequest($slp_token_info_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpTokenInfoResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpTokenInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpTokenInfoResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpTokenInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpTokenInfoAsync
     *
     * Get information about the token
     *
     * @param  \Mainnet\Model\SlpTokenInfoRequest $slp_token_info_request Request to get information about the token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpTokenInfoAsync($slp_token_info_request)
    {
        return $this->slpTokenInfoAsyncWithHttpInfo($slp_token_info_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpTokenInfoAsyncWithHttpInfo
     *
     * Get information about the token
     *
     * @param  \Mainnet\Model\SlpTokenInfoRequest $slp_token_info_request Request to get information about the token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpTokenInfoAsyncWithHttpInfo($slp_token_info_request)
    {
        $returnType = '\Mainnet\Model\SlpTokenInfoResponse';
        $request = $this->slpTokenInfoRequest($slp_token_info_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpTokenInfo'
     *
     * @param  \Mainnet\Model\SlpTokenInfoRequest $slp_token_info_request Request to get information about the token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpTokenInfoRequest($slp_token_info_request)
    {
        // verify the required parameter 'slp_token_info_request' is set
        if ($slp_token_info_request === null || (is_array($slp_token_info_request) && count($slp_token_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slp_token_info_request when calling slpTokenInfo'
            );
        }

        $resourcePath = '/wallet/slp/token_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($slp_token_info_request)) {
            $_tempBody = $slp_token_info_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation slpUtxos
     *
     * Get detailed information about unspent SLP outputs (utxos)
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request detailed list of unspent SLP transaction outputs (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SlpUtxoResponse
     */
    public function slpUtxos($serialized_wallet)
    {
        list($response) = $this->slpUtxosWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation slpUtxosWithHttpInfo
     *
     * Get detailed information about unspent SLP outputs (utxos)
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request detailed list of unspent SLP transaction outputs (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SlpUtxoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function slpUtxosWithHttpInfo($serialized_wallet)
    {
        $request = $this->slpUtxosRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SlpUtxoResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SlpUtxoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SlpUtxoResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SlpUtxoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation slpUtxosAsync
     *
     * Get detailed information about unspent SLP outputs (utxos)
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request detailed list of unspent SLP transaction outputs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpUtxosAsync($serialized_wallet)
    {
        return $this->slpUtxosAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation slpUtxosAsyncWithHttpInfo
     *
     * Get detailed information about unspent SLP outputs (utxos)
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request detailed list of unspent SLP transaction outputs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function slpUtxosAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\SlpUtxoResponse';
        $request = $this->slpUtxosRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'slpUtxos'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request detailed list of unspent SLP transaction outputs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function slpUtxosRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling slpUtxos'
            );
        }

        $resourcePath = '/wallet/slp/utxo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
