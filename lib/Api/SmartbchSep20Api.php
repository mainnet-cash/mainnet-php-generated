<?php
/**
 * SmartbchSep20Api
 * PHP version 7.2
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mainnet Cash
 *
 * A developer friendly bitcoin cash wallet api  This API is currently in *active* development, breaking changes may be made prior to official release of version 1.0.0.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: hello@mainnet.cash
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mainnet\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Mainnet\ApiException;
use Mainnet\Configuration;
use Mainnet\HeaderSelector;
use Mainnet\ObjectSerializer;

/**
 * SmartbchSep20Api Class Doc Comment
 *
 * @category Class
 * @package  Mainnet
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SmartbchSep20Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation smartBchSep20AllBalances
     *
     * Get all SmartBch SEP20 balances of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20AllBalancesRequest $smart_bch_sep20_all_balances_request Request for a wallet SEP20 token balances. Does a deep blockchain scan for tokens transferred to or from this address Might take a long time to run and time-out. (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchSep20BalanceResponse[]
     */
    public function smartBchSep20AllBalances($smart_bch_sep20_all_balances_request)
    {
        list($response) = $this->smartBchSep20AllBalancesWithHttpInfo($smart_bch_sep20_all_balances_request);
        return $response;
    }

    /**
     * Operation smartBchSep20AllBalancesWithHttpInfo
     *
     * Get all SmartBch SEP20 balances of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20AllBalancesRequest $smart_bch_sep20_all_balances_request Request for a wallet SEP20 token balances. Does a deep blockchain scan for tokens transferred to or from this address Might take a long time to run and time-out. (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchSep20BalanceResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20AllBalancesWithHttpInfo($smart_bch_sep20_all_balances_request)
    {
        $request = $this->smartBchSep20AllBalancesRequest($smart_bch_sep20_all_balances_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchSep20BalanceResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchSep20BalanceResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchSep20BalanceResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchSep20BalanceResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20AllBalancesAsync
     *
     * Get all SmartBch SEP20 balances of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20AllBalancesRequest $smart_bch_sep20_all_balances_request Request for a wallet SEP20 token balances. Does a deep blockchain scan for tokens transferred to or from this address Might take a long time to run and time-out. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20AllBalancesAsync($smart_bch_sep20_all_balances_request)
    {
        return $this->smartBchSep20AllBalancesAsyncWithHttpInfo($smart_bch_sep20_all_balances_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20AllBalancesAsyncWithHttpInfo
     *
     * Get all SmartBch SEP20 balances of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20AllBalancesRequest $smart_bch_sep20_all_balances_request Request for a wallet SEP20 token balances. Does a deep blockchain scan for tokens transferred to or from this address Might take a long time to run and time-out. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20AllBalancesAsyncWithHttpInfo($smart_bch_sep20_all_balances_request)
    {
        $returnType = '\Mainnet\Model\SmartBchSep20BalanceResponse[]';
        $request = $this->smartBchSep20AllBalancesRequest($smart_bch_sep20_all_balances_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20AllBalances'
     *
     * @param  \Mainnet\Model\SmartBchSep20AllBalancesRequest $smart_bch_sep20_all_balances_request Request for a wallet SEP20 token balances. Does a deep blockchain scan for tokens transferred to or from this address Might take a long time to run and time-out. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20AllBalancesRequest($smart_bch_sep20_all_balances_request)
    {
        // verify the required parameter 'smart_bch_sep20_all_balances_request' is set
        if ($smart_bch_sep20_all_balances_request === null || (is_array($smart_bch_sep20_all_balances_request) && count($smart_bch_sep20_all_balances_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_all_balances_request when calling smartBchSep20AllBalances'
            );
        }

        $resourcePath = '/smartbch/sep20/all_balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_all_balances_request)) {
            $_tempBody = $smart_bch_sep20_all_balances_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20Balance
     *
     * Get total SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20BalanceRequest $smart_bch_sep20_balance_request Request for a wallet SmartBch SEP20 token balance (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchSep20BalanceResponse
     */
    public function smartBchSep20Balance($smart_bch_sep20_balance_request)
    {
        list($response) = $this->smartBchSep20BalanceWithHttpInfo($smart_bch_sep20_balance_request);
        return $response;
    }

    /**
     * Operation smartBchSep20BalanceWithHttpInfo
     *
     * Get total SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20BalanceRequest $smart_bch_sep20_balance_request Request for a wallet SmartBch SEP20 token balance (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchSep20BalanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20BalanceWithHttpInfo($smart_bch_sep20_balance_request)
    {
        $request = $this->smartBchSep20BalanceRequest($smart_bch_sep20_balance_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchSep20BalanceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchSep20BalanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchSep20BalanceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchSep20BalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20BalanceAsync
     *
     * Get total SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20BalanceRequest $smart_bch_sep20_balance_request Request for a wallet SmartBch SEP20 token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20BalanceAsync($smart_bch_sep20_balance_request)
    {
        return $this->smartBchSep20BalanceAsyncWithHttpInfo($smart_bch_sep20_balance_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20BalanceAsyncWithHttpInfo
     *
     * Get total SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20BalanceRequest $smart_bch_sep20_balance_request Request for a wallet SmartBch SEP20 token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20BalanceAsyncWithHttpInfo($smart_bch_sep20_balance_request)
    {
        $returnType = '\Mainnet\Model\SmartBchSep20BalanceResponse';
        $request = $this->smartBchSep20BalanceRequest($smart_bch_sep20_balance_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20Balance'
     *
     * @param  \Mainnet\Model\SmartBchSep20BalanceRequest $smart_bch_sep20_balance_request Request for a wallet SmartBch SEP20 token balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20BalanceRequest($smart_bch_sep20_balance_request)
    {
        // verify the required parameter 'smart_bch_sep20_balance_request' is set
        if ($smart_bch_sep20_balance_request === null || (is_array($smart_bch_sep20_balance_request) && count($smart_bch_sep20_balance_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_balance_request when calling smartBchSep20Balance'
            );
        }

        $resourcePath = '/smartbch/sep20/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_balance_request)) {
            $_tempBody = $smart_bch_sep20_balance_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20DepositAddress
     *
     * Get an SmartBch SEP20 deposit address
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SmartBch SEP20 deposit address given a wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchDepositAddressResponse
     */
    public function smartBchSep20DepositAddress($serialized_wallet)
    {
        list($response) = $this->smartBchSep20DepositAddressWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation smartBchSep20DepositAddressWithHttpInfo
     *
     * Get an SmartBch SEP20 deposit address
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SmartBch SEP20 deposit address given a wallet (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchDepositAddressResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20DepositAddressWithHttpInfo($serialized_wallet)
    {
        $request = $this->smartBchSep20DepositAddressRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchDepositAddressResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchDepositAddressResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchDepositAddressResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchDepositAddressResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20DepositAddressAsync
     *
     * Get an SmartBch SEP20 deposit address
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SmartBch SEP20 deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20DepositAddressAsync($serialized_wallet)
    {
        return $this->smartBchSep20DepositAddressAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20DepositAddressAsyncWithHttpInfo
     *
     * Get an SmartBch SEP20 deposit address
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SmartBch SEP20 deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20DepositAddressAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\SmartBchDepositAddressResponse';
        $request = $this->smartBchSep20DepositAddressRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20DepositAddress'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for an SmartBch SEP20 deposit address given a wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20DepositAddressRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling smartBchSep20DepositAddress'
            );
        }

        $resourcePath = '/smartbch/sep20/deposit_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20DepositQr
     *
     * Get an SmartBch SEP20 receiving address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a SmartBch SEP20 deposit address as a Quick Response code (qrcode) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\ScalableVectorGraphic
     */
    public function smartBchSep20DepositQr($serialized_wallet)
    {
        list($response) = $this->smartBchSep20DepositQrWithHttpInfo($serialized_wallet);
        return $response;
    }

    /**
     * Operation smartBchSep20DepositQrWithHttpInfo
     *
     * Get an SmartBch SEP20 receiving address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a SmartBch SEP20 deposit address as a Quick Response code (qrcode) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\ScalableVectorGraphic, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20DepositQrWithHttpInfo($serialized_wallet)
    {
        $request = $this->smartBchSep20DepositQrRequest($serialized_wallet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\ScalableVectorGraphic' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\ScalableVectorGraphic', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\ScalableVectorGraphic';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\ScalableVectorGraphic',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20DepositQrAsync
     *
     * Get an SmartBch SEP20 receiving address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a SmartBch SEP20 deposit address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20DepositQrAsync($serialized_wallet)
    {
        return $this->smartBchSep20DepositQrAsyncWithHttpInfo($serialized_wallet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20DepositQrAsyncWithHttpInfo
     *
     * Get an SmartBch SEP20 receiving address as a qrcode
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a SmartBch SEP20 deposit address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20DepositQrAsyncWithHttpInfo($serialized_wallet)
    {
        $returnType = '\Mainnet\Model\ScalableVectorGraphic';
        $request = $this->smartBchSep20DepositQrRequest($serialized_wallet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20DepositQr'
     *
     * @param  \Mainnet\Model\SerializedWallet $serialized_wallet Request for a SmartBch SEP20 deposit address as a Quick Response code (qrcode) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20DepositQrRequest($serialized_wallet)
    {
        // verify the required parameter 'serialized_wallet' is set
        if ($serialized_wallet === null || (is_array($serialized_wallet) && count($serialized_wallet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialized_wallet when calling smartBchSep20DepositQr'
            );
        }

        $resourcePath = '/smartbch/sep20/deposit_qr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($serialized_wallet)) {
            $_tempBody = $serialized_wallet;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20Genesis
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20GenesisRequest $smart_bch_sep20_genesis_request Request to create a new SmartBch SEP20 token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchSep20GenesisResponse
     */
    public function smartBchSep20Genesis($smart_bch_sep20_genesis_request)
    {
        list($response) = $this->smartBchSep20GenesisWithHttpInfo($smart_bch_sep20_genesis_request);
        return $response;
    }

    /**
     * Operation smartBchSep20GenesisWithHttpInfo
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20GenesisRequest $smart_bch_sep20_genesis_request Request to create a new SmartBch SEP20 token (genesis) (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchSep20GenesisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20GenesisWithHttpInfo($smart_bch_sep20_genesis_request)
    {
        $request = $this->smartBchSep20GenesisRequest($smart_bch_sep20_genesis_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchSep20GenesisResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchSep20GenesisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchSep20GenesisResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchSep20GenesisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20GenesisAsync
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20GenesisRequest $smart_bch_sep20_genesis_request Request to create a new SmartBch SEP20 token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20GenesisAsync($smart_bch_sep20_genesis_request)
    {
        return $this->smartBchSep20GenesisAsyncWithHttpInfo($smart_bch_sep20_genesis_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20GenesisAsyncWithHttpInfo
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20GenesisRequest $smart_bch_sep20_genesis_request Request to create a new SmartBch SEP20 token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20GenesisAsyncWithHttpInfo($smart_bch_sep20_genesis_request)
    {
        $returnType = '\Mainnet\Model\SmartBchSep20GenesisResponse';
        $request = $this->smartBchSep20GenesisRequest($smart_bch_sep20_genesis_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20Genesis'
     *
     * @param  \Mainnet\Model\SmartBchSep20GenesisRequest $smart_bch_sep20_genesis_request Request to create a new SmartBch SEP20 token (genesis) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20GenesisRequest($smart_bch_sep20_genesis_request)
    {
        // verify the required parameter 'smart_bch_sep20_genesis_request' is set
        if ($smart_bch_sep20_genesis_request === null || (is_array($smart_bch_sep20_genesis_request) && count($smart_bch_sep20_genesis_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_genesis_request when calling smartBchSep20Genesis'
            );
        }

        $resourcePath = '/smartbch/sep20/genesis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_genesis_request)) {
            $_tempBody = $smart_bch_sep20_genesis_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20Mint
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20MintRequest $smart_bch_sep20_mint_request Request to mint more of SmartBch SEP20 tokens (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchSep20MintResponse
     */
    public function smartBchSep20Mint($smart_bch_sep20_mint_request)
    {
        list($response) = $this->smartBchSep20MintWithHttpInfo($smart_bch_sep20_mint_request);
        return $response;
    }

    /**
     * Operation smartBchSep20MintWithHttpInfo
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20MintRequest $smart_bch_sep20_mint_request Request to mint more of SmartBch SEP20 tokens (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchSep20MintResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20MintWithHttpInfo($smart_bch_sep20_mint_request)
    {
        $request = $this->smartBchSep20MintRequest($smart_bch_sep20_mint_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchSep20MintResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchSep20MintResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchSep20MintResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchSep20MintResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20MintAsync
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20MintRequest $smart_bch_sep20_mint_request Request to mint more of SmartBch SEP20 tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20MintAsync($smart_bch_sep20_mint_request)
    {
        return $this->smartBchSep20MintAsyncWithHttpInfo($smart_bch_sep20_mint_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20MintAsyncWithHttpInfo
     *
     * Get created tokenId back and new SmartBch SEP20 token balance of the wallet
     *
     * @param  \Mainnet\Model\SmartBchSep20MintRequest $smart_bch_sep20_mint_request Request to mint more of SmartBch SEP20 tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20MintAsyncWithHttpInfo($smart_bch_sep20_mint_request)
    {
        $returnType = '\Mainnet\Model\SmartBchSep20MintResponse';
        $request = $this->smartBchSep20MintRequest($smart_bch_sep20_mint_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20Mint'
     *
     * @param  \Mainnet\Model\SmartBchSep20MintRequest $smart_bch_sep20_mint_request Request to mint more of SmartBch SEP20 tokens (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20MintRequest($smart_bch_sep20_mint_request)
    {
        // verify the required parameter 'smart_bch_sep20_mint_request' is set
        if ($smart_bch_sep20_mint_request === null || (is_array($smart_bch_sep20_mint_request) && count($smart_bch_sep20_mint_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_mint_request when calling smartBchSep20Mint'
            );
        }

        $resourcePath = '/smartbch/sep20/mint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_mint_request)) {
            $_tempBody = $smart_bch_sep20_mint_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20Send
     *
     * Send some SmartBch SEP20 token amount to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendRequest $smart_bch_sep20_send_request place a SmartBch SEP20 token send request (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function smartBchSep20Send($smart_bch_sep20_send_request)
    {
        list($response) = $this->smartBchSep20SendWithHttpInfo($smart_bch_sep20_send_request);
        return $response;
    }

    /**
     * Operation smartBchSep20SendWithHttpInfo
     *
     * Send some SmartBch SEP20 token amount to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendRequest $smart_bch_sep20_send_request place a SmartBch SEP20 token send request (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20SendWithHttpInfo($smart_bch_sep20_send_request)
    {
        $request = $this->smartBchSep20SendRequest($smart_bch_sep20_send_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20SendAsync
     *
     * Send some SmartBch SEP20 token amount to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendRequest $smart_bch_sep20_send_request place a SmartBch SEP20 token send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20SendAsync($smart_bch_sep20_send_request)
    {
        return $this->smartBchSep20SendAsyncWithHttpInfo($smart_bch_sep20_send_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20SendAsyncWithHttpInfo
     *
     * Send some SmartBch SEP20 token amount to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendRequest $smart_bch_sep20_send_request place a SmartBch SEP20 token send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20SendAsyncWithHttpInfo($smart_bch_sep20_send_request)
    {
        $returnType = 'object[]';
        $request = $this->smartBchSep20SendRequest($smart_bch_sep20_send_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20Send'
     *
     * @param  \Mainnet\Model\SmartBchSep20SendRequest $smart_bch_sep20_send_request place a SmartBch SEP20 token send request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20SendRequest($smart_bch_sep20_send_request)
    {
        // verify the required parameter 'smart_bch_sep20_send_request' is set
        if ($smart_bch_sep20_send_request === null || (is_array($smart_bch_sep20_send_request) && count($smart_bch_sep20_send_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_send_request when calling smartBchSep20Send'
            );
        }

        $resourcePath = '/smartbch/sep20/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_send_request)) {
            $_tempBody = $smart_bch_sep20_send_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20SendMax
     *
     * Send all available SmartBch SEP20 token funds to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendMaxRequest $smart_bch_sep20_send_max_request Request to send all available SmartBch SEP20 token funds to a given address (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function smartBchSep20SendMax($smart_bch_sep20_send_max_request)
    {
        list($response) = $this->smartBchSep20SendMaxWithHttpInfo($smart_bch_sep20_send_max_request);
        return $response;
    }

    /**
     * Operation smartBchSep20SendMaxWithHttpInfo
     *
     * Send all available SmartBch SEP20 token funds to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendMaxRequest $smart_bch_sep20_send_max_request Request to send all available SmartBch SEP20 token funds to a given address (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20SendMaxWithHttpInfo($smart_bch_sep20_send_max_request)
    {
        $request = $this->smartBchSep20SendMaxRequest($smart_bch_sep20_send_max_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20SendMaxAsync
     *
     * Send all available SmartBch SEP20 token funds to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendMaxRequest $smart_bch_sep20_send_max_request Request to send all available SmartBch SEP20 token funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20SendMaxAsync($smart_bch_sep20_send_max_request)
    {
        return $this->smartBchSep20SendMaxAsyncWithHttpInfo($smart_bch_sep20_send_max_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20SendMaxAsyncWithHttpInfo
     *
     * Send all available SmartBch SEP20 token funds to a given address
     *
     * @param  \Mainnet\Model\SmartBchSep20SendMaxRequest $smart_bch_sep20_send_max_request Request to send all available SmartBch SEP20 token funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20SendMaxAsyncWithHttpInfo($smart_bch_sep20_send_max_request)
    {
        $returnType = 'object[]';
        $request = $this->smartBchSep20SendMaxRequest($smart_bch_sep20_send_max_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20SendMax'
     *
     * @param  \Mainnet\Model\SmartBchSep20SendMaxRequest $smart_bch_sep20_send_max_request Request to send all available SmartBch SEP20 token funds to a given address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20SendMaxRequest($smart_bch_sep20_send_max_request)
    {
        // verify the required parameter 'smart_bch_sep20_send_max_request' is set
        if ($smart_bch_sep20_send_max_request === null || (is_array($smart_bch_sep20_send_max_request) && count($smart_bch_sep20_send_max_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_send_max_request when calling smartBchSep20SendMax'
            );
        }

        $resourcePath = '/smartbch/sep20/send_max';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_send_max_request)) {
            $_tempBody = $smart_bch_sep20_send_max_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smartBchSep20TokenInfo
     *
     * Get information about the SmartBch SEP20 token
     *
     * @param  \Mainnet\Model\SmartBchSep20TokenInfoRequest $smart_bch_sep20_token_info_request Request to get information about the SmartBch SEP20 token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mainnet\Model\SmartBchSep20TokenInfoResponse
     */
    public function smartBchSep20TokenInfo($smart_bch_sep20_token_info_request)
    {
        list($response) = $this->smartBchSep20TokenInfoWithHttpInfo($smart_bch_sep20_token_info_request);
        return $response;
    }

    /**
     * Operation smartBchSep20TokenInfoWithHttpInfo
     *
     * Get information about the SmartBch SEP20 token
     *
     * @param  \Mainnet\Model\SmartBchSep20TokenInfoRequest $smart_bch_sep20_token_info_request Request to get information about the SmartBch SEP20 token (required)
     *
     * @throws \Mainnet\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mainnet\Model\SmartBchSep20TokenInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function smartBchSep20TokenInfoWithHttpInfo($smart_bch_sep20_token_info_request)
    {
        $request = $this->smartBchSep20TokenInfoRequest($smart_bch_sep20_token_info_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Mainnet\Model\SmartBchSep20TokenInfoResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mainnet\Model\SmartBchSep20TokenInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mainnet\Model\SmartBchSep20TokenInfoResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mainnet\Model\SmartBchSep20TokenInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smartBchSep20TokenInfoAsync
     *
     * Get information about the SmartBch SEP20 token
     *
     * @param  \Mainnet\Model\SmartBchSep20TokenInfoRequest $smart_bch_sep20_token_info_request Request to get information about the SmartBch SEP20 token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20TokenInfoAsync($smart_bch_sep20_token_info_request)
    {
        return $this->smartBchSep20TokenInfoAsyncWithHttpInfo($smart_bch_sep20_token_info_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smartBchSep20TokenInfoAsyncWithHttpInfo
     *
     * Get information about the SmartBch SEP20 token
     *
     * @param  \Mainnet\Model\SmartBchSep20TokenInfoRequest $smart_bch_sep20_token_info_request Request to get information about the SmartBch SEP20 token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smartBchSep20TokenInfoAsyncWithHttpInfo($smart_bch_sep20_token_info_request)
    {
        $returnType = '\Mainnet\Model\SmartBchSep20TokenInfoResponse';
        $request = $this->smartBchSep20TokenInfoRequest($smart_bch_sep20_token_info_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smartBchSep20TokenInfo'
     *
     * @param  \Mainnet\Model\SmartBchSep20TokenInfoRequest $smart_bch_sep20_token_info_request Request to get information about the SmartBch SEP20 token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smartBchSep20TokenInfoRequest($smart_bch_sep20_token_info_request)
    {
        // verify the required parameter 'smart_bch_sep20_token_info_request' is set
        if ($smart_bch_sep20_token_info_request === null || (is_array($smart_bch_sep20_token_info_request) && count($smart_bch_sep20_token_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smart_bch_sep20_token_info_request when calling smartBchSep20TokenInfo'
            );
        }

        $resourcePath = '/smartbch/sep20/token_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($smart_bch_sep20_token_info_request)) {
            $_tempBody = $smart_bch_sep20_token_info_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
